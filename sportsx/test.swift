//
//  test.swift
//  sportsx
//
//  only use for some local unit tests
//
//  Created by 任杰 on 2024/9/20.
//

import SwiftUI
import UIKit
import MapKit
import Combine
import CoreML
import os


class ModelInput: NSObject, MLFeatureProvider {
    var featureNames: Set<String> {
        return ["input_2"]
    }
    
    var input: MLMultiArray

    init(inputData: [Float]) {
        // 创建 MLMultiArray
        let shape = [1, NSNumber(value: inputData.count), 1]
        self.input = try! MLMultiArray(shape: shape, dataType: .float32)
        // 填充 MLMultiArray
        for (index, value) in inputData.enumerated() {
            self.input[index] = NSNumber(value: value)
        }
    }

    func featureValue(for featureName: String) -> MLFeatureValue? {
        if featureName == "input_2" {
            return MLFeatureValue(multiArray: input)
        }
        return nil
    }
}

class testVM: ObservableObject{
    // 加载模型
    var model: MLModel?
    //var sensorData: [Float]?
    
    init() {
        if let resourceBundle = Bundle(path: Bundle.main.bundlePath + "/resources.bundle"),
           let modelURL = resourceBundle.url(forResource: "xpose_tcn_model", withExtension: "mlpackage") {
            // 使用 modelURL 加载模型
            DispatchQueue.global(qos: .background).async {
                do {
                    let compiledModelURL = try MLModel.compileModel(at: modelURL)
                    do {
                        let compiledModel = try MLModel(contentsOf: compiledModelURL)
                        self.model = compiledModel
                    } catch {
                        print("model load fail")
                    }
                } catch {
                    print("model compile fail")
                }
            }
        } else {
            print("model not found")
        }
        //sensorData = loadCSVData()
    }
    
    func loadCSVData() -> [Float]? {
        // 获取资源包的路径
        if let resourceBundle = Bundle(path: Bundle.main.bundlePath + "/resources.bundle"),
           let csvURL = resourceBundle.url(forResource: "sensorSample", withExtension: "csv") {
            do {
                // 读取 CSV 文件内容
                let csvString = try String(contentsOf: csvURL, encoding: .utf8)
                // 将 CSV 内容按行分割
                let rows = csvString.components(separatedBy: "\n")
                // 假设数据在第一行
                if let firstRow = rows.first {
                    // 将第一行按逗号分割
                    let stringValues = firstRow.components(separatedBy: ",")
                    // 将字符串数组转换为浮动数组
                    let floatValues = stringValues.compactMap { Float($0) }
                    return floatValues
                }
            } catch {
                print("读取文件失败: \(error)")
            }
        } else {
            print("无法找到资源包或 CSV 文件")
        }
        return nil
    }
}

struct test_old: View {
    @State var viewModel: testVM = testVM()
    @State private var predictionResult: String = "等待预测..."

    var body: some View {
        VStack {
            Text("预测结果: \(predictionResult)")
                .padding()
                .font(.title)
            
            Button(action: {
                predict()
            }) {
                Text("点击预测")
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()
        }
        .padding()
    }
    
    private func predict() {
        Logger.competition.notice_public("test for new log")
        guard let model = viewModel.model else {
            predictionResult = "模型未加载成功"
            return
        }

        // 假设你的输入数据是 [1, 360] 维度的
        let inputData: [Float] = Array(repeating: 1.0, count: 360)
        let sensorData: [Float] = [-0.043120384216308600,-0.004244901239871980,-0.009401679039001470,0.08590728789567950,-0.12367755174636800,-0.12367755174636800,-0.040775127708911900,-0.004630565643310550,-0.00443720817565918,0.10379942506551700,-0.17129407823085800,-0.17129407823085800,-0.027368314564228100,0.010364674031734500,-0.0009803175926208500,0.06891804933547970,-0.1309192180633550,-0.1309192180633550,-0.030468136072158800,0.022198975086212200,0.015291810035705600,0.03686624392867090,-0.1467607617378240,-0.1467607617378240,-0.04009338468313220,0.023676112294197100,0.017228305339813200,0.03332486003637310,-0.17336946725845300,-0.17336946725845300,-0.031625933945179000,0.01970517635345460,0.012294471263885500,0.09975701570510860,-0.20524804294109300,-0.20524804294109300,0.007726192474365230,-0.016464129090309100,0.009596049785614010,0.03531477600336080,-0.16598506271839100,-0.16598506271839100,0.013644903898239100,-0.02498750388622280,-0.019681453704834000,0.060293979942798600,-0.09377051889896390,-0.09377051889896390,0.0343029722571373,-0.054170072078704800,0.017051756381988500,0.02953496016561990,-0.03452157601714130,-0.03452157601714130,0.026766590774059300,-0.030213475227356000,0.0013918876647949200,0.05782057344913480,0.023390991613268900,0.023390991613268900,0.01334507018327710,-0.035016804933548000,0.022068262100219700,0.019363725557923300,0.05149026960134510,0.05149026960134510,-0.0067832618951797500,-0.03425005078315740,0.03327929973602300,-0.11625593155622500,0.11612039804458600,0.11612039804458600,-0.027232155203819300,-0.012941256165504500,0.02711331844329830,-0.09585389494895940,0.10425255447626100,0.10425255447626100,-0.04561885446310040,0.022789642214775100,0.012828171253204300,0.042239390313625300,0.008183808997273450,0.008183808997273450,-0.04369238764047620,0.04195183515548710,-0.004449725151062010,0.09898629039525990,-0.1038907989859580,-0.1038907989859580,-0.018005840480327600,-0.012581557035446200,0.010327458381652800,-0.09543875604867940,-0.11441667377948800,-0.11441667377948800,-0.01974380761384960,-0.09180023521184920,0.08403176069259640,-1.2889137268066400,0.019087588414549800,0.019087588414549800,0.016775354743003800,-0.12170632183551800,0.09870582818984990,-2.9549670219421400,0.12560337781906100,0.12560337781906100,0.03743968904018400,-0.15849365293979600,0.10550129413604700,-4.300241947174070,0.3481602668762210,0.3481602668762210,-0.06622406095266340,0.027756989002227800,-0.016295194625854500,-3.341526985168460,0.34283873438835100,0.34283873438835100,-0.019788920879364000,-0.048912107944488500,-0.009249746799468990,-2.941938877105710,0.4496839642524720,0.4496839642524720,0.03353352099657060,-0.008045077323913570,-0.04767727851867680,-3.00250244140625,0.3854179084301000,0.3854179084301000,-0.017882511019706700,0.07652121782302860,-0.07176530361175540,-2.1546239852905300,0.2335634082555770,0.2335634082555770,-0.003303222358226780,-0.0047607421875,-0.04461556673049930,-1.846720814704900,0.0924249216914177,0.0924249216914177,-0.013565823435783400,0.03277575969696050,-0.034198224544525100,-1.158409595489500,-0.009061756543815140,-0.009061756543815140,0.006450332701206210,-0.014949321746826200,-0.011180877685546900,-0.5771402716636660,-0.04429777339100840,-0.04429777339100840,0.009415455162525180,-0.051373839378356900,0.0156899094581604,-0.4854905605316160,-0.02567269280552860,-0.02567269280552860,-0.019066251814365400,-0.04724806547164920,0.0042514801025390600,-0.6679173707962040,0.050488390028476700,0.050488390028476700,-0.027120329439640000,0.03329950571060180,-0.033502161502838100,-0.1663835495710370,0.0565798394382,0.0565798394382,-0.034167759120464300,-0.012489497661590600,0.017316102981567400,-0.43231409788131700,0.11897237598896000,0.11897237598896000,-0.028582662343978900,0.07878100872039800,-0.039953649044036900,-0.18418829143047300,0.09669902920722960,0.09669902920722960,-0.010578848421573600,0.06108623743057250,-0.004648178815841680,-0.07957270741462710,0.022307084873318700,0.022307084873318700,-0.010578848421573600,0.06108623743057250,-0.004648178815841680,-0.07957270741462710,0.022307084873318700,0.022307084873318700,-0.005250908434391020,0.054798245429992700,-0.03209236264228820,0.3102620840072630,-0.0768895372748375,-0.0768895372748375,-0.005250908434391020,0.054798245429992700,-0.03209236264228820,0.3102620840072630,-0.0768895372748375,-0.0768895372748375,-0.007392808794975280,0.0053514838218689000,-0.006489962339401250,0.12132541835308100,-0.051089633256197000,-0.051089633256197000,0.0009741559624671940,-0.024679839611053500,0.0017802119255065900,-0.00623160507529974,-0.006851865444332360,-0.006851865444332360,-0.0148143470287323,-0.030972421169281000,0.011369705200195300,0.029490172863006600,0.01658794656395910,0.01658794656395910,-0.011633388698101000,-0.02748006582260130,0.005282878875732420,-0.029213396832346900,0.05985898897051810,0.05985898897051810,-0.011633388698101000,-0.02748006582260130,0.005282878875732420,-0.029213396832346900,0.05985898897051810,0.05985898897051810,-0.02136770635843280,0.0032523274421691900,0.0056504011154174800,-0.023380320519208900,0.051024217158556000,0.051024217158556000,-0.02122483402490620,0.015537261962890600,-0.0008241534233093260,0.03171297907829290,0.0349792055785656,0.0349792055785656,-0.016287080943584400,0.010971307754516600,-0.005817204713821410,0.0334048867225647,0.010812615975737600,0.010812615975737600,-0.011476099491119400,0.006140410900115970,-0.003822147846221920,0.03236381337046620,-0.01152651198208330,-0.01152651198208330,-0.01046726107597350,0.0018415451049804700,-0.01678025722503660,0.094203881919384,-0.03515594080090520,-0.03515594080090520,-0.002701111137866970,-0.03297656774520870,0.0050504207611084000,-0.05509968101978300,-0.01076564658433200,-0.01076564658433200,-0.00895855575799942,0.0006963610649108890,-0.008143782615661620,0.11906386911869000,-0.016371868550777400,-0.016371868550777400,0.0030264481902122500,0.01586174964904790,-0.004453212022781370,0.49622565507888800,-0.04527648538351060,-0.04527648538351060,0.004235528409481050,0.07574343681335450,-0.040708959102630600,1.7499146461486800,-0.18139144778251600,-0.18139144778251600,-0.008626561611890790,0.16365265846252400,-0.008427083492279050,3.6781537532806400,-0.4115554094314580,-0.4115554094314580,-0.004796914756298070,0.08246052265167240,0.08933132886886600,4.261605739593510,-0.5386555790901180,-0.5386555790901180,-0.004232905805110930,0.027115345001220700,0.12560826539993300,3.3833751678466800,-0.4757634401321410,-0.4757634401321410,-0.0074919722974300400,-0.03696495294570920,0.07731401920318600,2.4039528369903600,-0.394366055727005,-0.394366055727005,-0.021499941125512100,0.07427048683166500,0.014774501323700000,2.41166353225708,-0.35047316551208500,-0.35047316551208500,0.007369613274931910,-0.024150550365448000,0.03690904378890990,1.9692208766937300,-0.30576029419899000,-0.30576029419899000,-0.018458083271980300,0.06677039712667470,0.005755245685577390,2.070119619369510,-0.2730446755886080,-0.2730446755886080,0.02029399946331980,-0.07176963239908220,0.07360011339187620,0.6555935144424440,-0.18684613704681400,-0.18684613704681400,-0.008271325379610060,0.04304881393909450,-0.021420657634735100,0.7755381464958190,-0.19581033289432500,-0.19581033289432500,-0.0005040243268013,-0.049182258546352400,0.0355793833732605,0.2755172848701480,-0.14297081530094100,-0.14297081530094100,-0.01547461748123170,0.026170048862695700,-0.008286058902740480,0.43621936440467800,-0.13069631159305600,-0.13069631159305600]
        let inputProvider = ModelInput(inputData: sensorData)
        
        // 使用模型进行预测
        do {
            let predictionOutput = try model.prediction(from: inputProvider)
            
            // 获取预测结果
            if let result = predictionOutput.featureValue(for: "Identity")?.multiArrayValue {
                // 将输出转换为二分类结果
                let floatValue = result[0].floatValue// 如果大于等于0.5则为1，否则为0
                let boolValue = floatValue >= 0.5
                predictionResult = "预测值: \(boolValue)" // predictionBool ? "1" : "0")"
            } else {
                predictionResult = "无法获取预测结果"
            }
        } catch {
            print("预测失败: \(error)")
            predictionResult = "预测失败"
        }
    }
}


struct TestView: View {
    //@EnvironmentObject var appState: AppState
    //@StateObject var viewModel = TestViewModel()
    
    var body: some View {
        ZStack {
            Button("test"){
                print("test")
            }
        }
    }
}

class TestViewModel: ObservableObject {
    
}


#Preview {
    //let appState = AppState.shared
    TestView()
    //    .environmentObject(appState)
}
